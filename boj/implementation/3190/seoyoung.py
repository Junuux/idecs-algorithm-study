'''
< 뱀 >
뱀이 사과를 먹으면 뱀 길이가 늘어난다. 뱀이 벽 또는 자기 자신의 몸과 부딪히면 게임이 끝난다.

게임 시작 시 : 뱀은 맨 위 맨 좌측에 위치. 뱀의 길이는 1. 처음에 오른쪽 향함

< 이동 규칙 >
- 먼저 뱀은 몸길이를 늘려 머리를 다음 칸에 위치
- 이동한 칸에 사과가 있으면, 그 칸에 있던 사과는 없어지고 꼬리는 움직이지 않음
- 이동한 칸에 사과가 없으면, 몸길이를 줄여서 꼬리가 위치한 칸을 비워준다. 몸길이느 변하지 않는다.

< 입력 조건 >
- 보드의 크기 n, 사과의 개수 k
- k개의 줄에 사과의 위치가 주어짐. 행/열
- 다음 줄에는 뱀의 방향 변환 횟수 l
- l개의 줄에 뱀의 방향 변환 정보가 주어짐. 정수 x와 문자 c.
- 게임 시작 시간으로부터 x초가 끝난 뒤에 왼쪽(L) 오른쪽(D)로 90도 방향을 회전시킨다.

< 출력 조건 >
- 게임이 몇 초에 끝나는지 출력

함수를 여러개 만들어서 풀면 되나?
먼저 보드를 만들어서 사과를 위치에 사과를 넣는다.
뱀의 위치를 넣는 스택을 만든다.
4가지 방향을 만든다.
어느방향으로 가고있는지 방향 전환할 때마다 숫자를 더하거나 뻬서 인덱스를 변화시킨다.
시간동안 전진하는걸 반복한다.
벽을 만나거나 뱀의 위치 안에 있는 곳을 방문하면 멈춘다
'''

# 입력받기
n = int(input())    # 보드의 크기
k = int(input())    # 사과의 개수

# 보드 만들기
board = [[0]*n for _ in range(n)]
# 보드에 사과의 위치 넣기
for _ in range(k):
    r, c = map(int, input().split())
    board[r-1][c-1] = 1

l = int(input())    # 뱀의 방향 변환 횟수
direction = []      # 뱀의 방향 변환 정보
for _ in range(l):
    direction.append(tuple(input().split()))

# 이동 방향 설정하기
# 인덱스가 1일때 동쪽이도록. 오른쪽으로 가면 +1, 왼족 -1
# 북 동 남 서
dx = [0, 1, 0, -1]
dy = [1, 0, -1, 0]
# 시작 방향은 오른쪽이니까 동쪽.
d = 1
head = [0,0]

# 뱀이 위치한 칸을 스택구조로 저장하기
snake = [[0,0]]

# 시간 기록하기
result = 0

for way in direction:
    time = int(way[0])
    w = way[1]
    # 해당 시간 동안 정해진 방향으로 이동한다.
    for i in range(time):
        x = head[0] + dx[d]
        y = head[1] + dy[d]
        # 이동한 위치가 보드를 벗어나거나 뱀을 만나지 않는지 확인한다.
        if x < 0 or x >= n or y < 0 or y >= n:
            break
        if [x,y] in snake:
            break
        # 스택에 뱀이 이동한 위치를 넣는다.
        snake.append([x,y])
        head = [x, y]
        result += 1
        # 이동한 위치에 사과가 있는지 확인한다. 없으면 pop
        if board[x][y] != 1:
            snake.pop()
        else:
            board[x][y] = 0
    # 이동을 마치면 방향을 바꾼다.
    if w == 'L':
        d -= 1
    else:
        d += 1
    if d == 4:
        d = 0
    if d == -1:
        d = 3

print(result)