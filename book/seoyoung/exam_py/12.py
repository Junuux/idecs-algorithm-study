'''
< 기둥과 보 설치 >

기둥과 보를 이용하여 벽면 구조물을 자동으로 세우는 로봇 개발
2차원 가상 벽면에 기둥과 보를 이용한 구조물 설치 가능
- 기둥은 바닥 위에 있거나 보의 한쪽 끝부분 위에 있거나, 또는 다른 기둥 위에 있어야 한다.
- 보는 한쪽 끝부분이 기둥 위에 있거나, 또는 양쪽 끝부분이 다른 보와 동시에 연결되어 있어야 한다.

문제 이해도 안된다 ㅋ

벽면의 크기 n, 기둥과 보를 설치하거나 삭제하는 작업이 순서대로 담긴 2차원 배열 build_frame이 매개변수로 주어질 떼, 모든 명령어를 수행한 후
구조물의 상태를 return 하도록 solution 함수를 완성하라.

< 제한 사항 >
- [x, y, a, b]
x, y는 기둥, 보를 설치 또는 삭제할 교차점의 좌표. 가로 좌표, 세로 좌표 형태
a는 설치 또는 삭제할 구조물의 종류. 0은 기둥, 1은 보
b는 구조물 설치, 삭제 여부. 0은 삭제, 1은 설치
- 구조물은 교차점 좌표를 기준으로 보는 오른쪽, 기둥은 위쪽 방향으로 설치 또는 삭제
- return
가로길이가 3인 2차원 배열. 각 구조물의 좌표를 담고 있어야 한다.
[x, y, a] x, y는 기둥, 보의 교차점 좌표, 가로/세로 형태. 교차점 좌표 기준으로 오른쪽, 또는 위쪽 방향으로 설치되어 있음
a는 구조물의 종류. 0은 기둥, 1은 보
x 좌표 기준으로 오름차순 정렬, x 좌표 같을 경우 y 좌표 기준 오름차순 정렬
x, y 좌표 모두 같은 경우 기둥이 보보다 앞에 오도록


< 문제 해결 방향 >
조건을 놓치지 않고 잘 구현하는 것이 중요하다! 기둥이나 보가 설치 혹은 삭제될 수 있는지 여부를 확인하는 함수를 만든다.
설치된 구조물에 대한 정보를 저장해 확인한다. 설치 및 삭제 연산을 요구할 때마다 전체 구조물을 확인하며 규칙을 확인한다.
- 기둥은 바닥 위에 있거나 보의 한쪽 끝부분 위에 있거나, 또는 다른 기둥 위에 있어야 한다.
    y == 0 이거나, [x-1, y, 1] or [x, y-1, 0]이 이미 설치되어 있어야 한다.
- 보는 한쪽 끝부분이 기둥 위에 있거나. 또는 양쪽 끝부분이 다른 보와 동시에 연결되어 있어야 한다.
    [x, y-1, 0] or [x+1, y-1, 0] or [x-1, y, 1] and [x+1, y, 1]
좌표에 대한 이해가 필요해 보인다. 이 좌표는 우리가 일반적으로 생각하는 x가 가로, y가 세로인 좌표!! 그냥 평소대로 생각하면 된다.
'''

# 입력은 벽면의 크기 n, build_frame [[x, y, a, b], ...]

# 현재 설치된 구조물이 '가능한' 구조물인지 확인하는 함수
def possible(answer):   # 전체 구조물에 대해서 확인한다.
    for x, y, stuff in answer:
        if stuff == 0:  # 설치된 것이 기둥일 경우
            # 바닥 위, 보의 한쪽 끝부분 위, 또는 다른 기둥 위에 있으면 설치 가능
            if y == 0 or [x-1, y, 1] in answer or [x, y, 1] or [x, y-1, 0] in answer:
                continue
            return False    # 아니라면 거짓 반환
        elif stuff == 1:    # 설치된 것이 보일 경우
            # 한쪽 끝부분이 기둥 위에 있거나, 양쪽 끝부분이 다른 보와 동시에 연결되어 있으면 설치 가능
            if [x, y-1, 0] in answer or [x+1, y-1, 0] in answer or ([x-1, y, 1] in answer and [x+1, y, 1] in answer):
                continue
            return False    # 아니라면 거짓 반환
    return True # 전체 구조물을 확인하고 문제가 없으면 True를 반환한다. 설치나 삭제 가능!

def solution(n, build_frame):
    answer = []
    for frame in build_frame:
        x, y, stuff, operate = frame
        if operate == 0:    # 삭제하는 경우
            answer.remove([x, y, stuff])    # 일단 삭제해보기
            if not possible(answer):    # 가능한 구조물인지 확인
                answer.append([x, y, stuff])    # 불가능하면 다시 설치
        else:   # 설치하는 경우
            answer.append([x, y, stuff])    # 일단 설치해보기
            if not possible(answer):    # 가능한 구조물인지 확인
                answer.remove([x, y, stuff])    # 불가능하면 다시 삭제
    return sorted(answer)   # 정렬된 결과를 반환